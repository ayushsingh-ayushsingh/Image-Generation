const { Builder, By, Key, until } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
require('dotenv').config(); 

//Write after Generate a...
let prompt = "Generate a cinematic photograph of nature, no humans, no animals, cinematic, nature, natural...";

async function runChatbot() {
    prompt += process.env.text;

    let driver = await new Builder()
        .forBrowser('chrome')
        .setChromeOptions(new chrome.Options().addArguments('--incognito', '--headless', '--no-sandbox'))
        .build();

    try {
        await driver.get('https://duckduckgo.com/?q=DuckDuckGo&ia=chat');

        for (let className of ['ffON2NH02oMAcqyoh2UU', 'ffON2NH02oMAcqyoh2UU']) {
            await driver.wait(async () => {
                try {
                    await driver.executeScript("arguments[0].click();", await driver.findElement(By.css(`button.${className}`)));
                    return true;
                } catch (error) {
                    return error.name !== "ElementClickInterceptedError";
                }
            }, 5000);
        }

        await driver.wait(async () => {
            try {
                await driver.executeScript("arguments[0].click();", await driver.findElement(By.xpath("//button[text()='I Agree']")));
                return true;
            } catch (error) {
                return error.name !== "ElementClickInterceptedError";
            }
        }, 5000);

        let textArea = await driver.wait(until.elementLocated(By.css('textarea.JRDRiEf5NPKWK43sArdC')), 5000);
        await textArea.sendKeys(prompt, Key.RETURN);

        let response = "", previousResponse = "";
        for (let i = 0; i < 25; i++) {
            await driver.sleep(2000);
            response = await driver.executeScript(`
                let divs = document.querySelectorAll('div.JXNYs5FNOplxLlVAOswQ');
                return divs.length > 0 ? divs[divs.length - 1].innerText : "";
            `);
            if (response.length > 20 && !response.includes("Generating response") && response === previousResponse) break;
            previousResponse = response;
        }
        console.log('Craft:', response);
        generateAiArt(response);
    } finally {
        await driver.quit();
    }
}

async function generateAiArt(prompt) {
    console.log("Image generation is in progress...")

    let options = new chrome.Options();
    options.addArguments("--headless", "--disable-gpu", "--window-size=1920,1080", "--incognito");

    let driver = await new Builder()
        .forBrowser('chrome')
        .setChromeOptions(options)
        .build();

    try {
        await driver.get('https://replicate.com/stability-ai/stable-diffusion-3?prediction=jrdt4zf9anrm00cgeecvs7fhbr');

        let inputArea = await driver.wait(until.elementLocated(By.id('prompt')), 10000);
        await inputArea.clear();
        await inputArea.sendKeys(prompt);
        await driver.actions()
            .keyDown(Key.CONTROL)
            .sendKeys(Key.RETURN)
            .keyUp(Key.CONTROL)
            .perform();

        let imageElement = await driver.wait(until.elementLocated(By.xpath("//img[@data-testid='value-output-image']")), 60000);
        let imageUrl = await imageElement.getAttribute('src');
        let response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
        const tempFilePath = `image.webp`;
        fs.writeFileSync(tempFilePath, response.data);

        const dir = './autogenerated';
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir);
        }

        const filePath = path.join(dir, `${counter}.webp`);
        fs.writeFileSync(filePath, response.data);
        counter++;
        console.log(`Image saved as '${filePath}'`);
        console.log();
    } finally {
        await driver.quit();
    }
    runChatbot();
}

let counter = 1;
runChatbot();
